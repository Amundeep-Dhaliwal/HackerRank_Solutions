# detect a floating point number

import re
for _ in range(int(input())):
    print(bool(re.match(r'^[-+]?[0-9]*\.[0-9]+$', input())))

# Re.split() 

regex_pattern = r'[,.]'

# Group(), Groups() & Groupdict()

import re
m = re.search(r'([a-zA-Z0-9])\1+', input().strip())
print(m.group(1) if m else -1)

# Re.findall() & Re.finditer() 

import re
v ='aeiou'
c = 'qwrtyypsdfghjklzxcvbnm'
m = re.findall(r"(?<=[%s])([%s]{2,})[%s]"%(c,v,c), input(), flags = re.I )
#print(m)
print('\n'.join(m or ['-1']))

# Re.start() & Re.end()

import re
s = input()
patt =  input()
pattern = r'(?=('+patt+'))'
not_matched =True
for m in re.finditer(pattern, s):
    not_matched = False
    print((m.start(1), m.end(1)-1))
if not_matched:
    print((-1,-1))

# Regex Substitution

import re
for _ in range(int(input())):
    print(re.sub(r'(?<= )(\|\||&&)(?= )', lambda x: 'or' if x.group() == '||' else 'and', input()))

# Validating roman numerals 

regex_pattern = r"M{0,3}(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[VX]|V?I{0,3})$"

# Validating phone numbers

import re
for _ in range(int(input())):
    if re.match(r'(7|8|9)[0-9]{2}[ -\.]?[0-9]{3}[ -\.]?[0-9]{4}$', input()):
        print('YES')
    else:
        print('NO')

# Validating and parsing email addresses

import re
pattern= r'<[A-Za-z](\w|-|\.|_)+@[A-Za-z]+\.[A-Za-z]{1,3}>'
for _ in range(int(input())):
    x, y = input().split(' ')
    if re.match(pattern, y):
        #print(email.utils.formataddr(tup))
        print(x,y)

# Hex color code

import re
pattern = r'[ :,\.](#[0-9A-Fa-f]{3,6})'
for _ in range(int(input())):
    for m in re.finditer(pattern, input()):
        print(m.group(1))

# HTML parser - part 1

from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print("Start :", tag)
        for attr in attrs:
            print("-> "+attr[0]+" >", attr[1])
    def handle_endtag(self, tag):
        print("End   :", tag)
    def handle_comment(self, data):
        pass
    def handle_startendtag(self, tag, attrs):
        print("Empty :", tag)
        for attr in attrs:
            print('->',attr[0],'>',attr[1])

parser = MyHTMLParser()
for _ in range(int(input())):
    parser.feed(input())

# HTML parser - part 2 

from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_comment(self,data):
        
        if '\n' in data:
            print('>>> Multi-line Comment')
            print(data)
        else:
            print('>>> Single-line Comment')
            print(data)
    
    def handle_data(self, data):
        if data != '\n':
            print(">>> Data")
            print(data)

  
html = ""       
for i in range(int(input())):
    html += input().rstrip()
    html += '\n'
    
parser = MyHTMLParser()
parser.feed(html)
parser.close()

# Detect HTML tags, Attributes and Attribute values

from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    
    def handle_starttag(self, tag, attrs):
        print(tag)
        for attr in attrs:
            #print(attr)
            print("->",attr[0],">", attr[1])
  

parser = MyHTMLParser()
html = ''
for _ in range(int(input())):
    html += input()
parser.feed(html)

# Validating UID

for _ in range(int(input())):
    s= input()
    number = 0
    uppercase = 0
    lowercase = 0
    snum = '0123456789'
    alpha = 'abcdefghijklmnopqrstuvwxyz'
    ualpha = alpha.upper()
    not_valid = 0
    for i in s:
        if i in alpha:
            lowercase += 1
        elif i in ualpha:
            uppercase += 1
        elif i in snum:
            number += 1
    for j in range(len(s)):
        for k in range(len(s)):
            if s[j] == s[k] and j!= k:
                not_valid += 1
    if (lowercase + uppercase + number) == 10 and uppercase >1 and number > 2 and not_valid == 0:
        print('Valid')
    else:
        print('Invalid')

# Validating Credit Card Numbers 

import re
for _ in range(int(input())):
    s = input()
    if bool(re.search(r'^(4|5|6)\d{3}(-)?\d{4}(-)?\d{4}(-)?\d{4}$',s)):
        if '-' in s:
            lis = s.split('-')
            s = ''.join(lis)
        if not bool(re.search(r'(\d)\1{3}', s)):
            print('Valid')
        else:
            print('Invalid')
    else:
            print('Invalid')

# validating postal codes

regex_integer_in_range = r"^[1-9]\d{5}$"
regex_alternating_repetitive_digit_pair = r"(?=((\d)\d\2))"	

# Matrix script

import re

rows, columns = map(int, input().split())
script = []

for _ in range(rows):
    matrix_item = input()
    script.append(matrix_item)

em = ''
for i in range(columns):
    for row in script:
        em += row[i]
print(re.sub(r'(?<=\w)[!@#$% ]+(?=\w)', ' ', em))
